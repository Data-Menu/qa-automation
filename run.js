import fs,{copyFileSync}from"fs";import puppeteer from"puppeteer-extra";import StealthPlugin from"puppeteer-extra-plugin-stealth";puppeteer.use(StealthPlugin());let startTime=(new Date).getTime();var invalidURLs="URL, Reason";var csvFile="Client, URL, Tags";var totalCollected=0;var totalFailed=0;var totalChecked=0;var totalClients=0;async function collectTags(t,e,a){try{var l=getClientFromURL(t);await a["goto"](t);await a.waitForNetworkIdle();await getScreenshot(l,a);try{var i=[];var o=await a.$eval("html",t=>t.innerHTML);for(let t of e){if(o.includes(t)){i.push(t)}}await outputFound(l,t,i);totalCollected++}catch(r){invalidURLs+=`\n${t}, Page Failed To Load [Screenshot]`;await writeOutput("OUTPUT/failedUrls.csv",invalidURLs);totalFailed++}}catch(r){invalidURLs+=`\n${t}, Page Failed To Load [No Screenshot]`;await writeOutput("OUTPUT/failedUrls.csv",invalidURLs);totalFailed++}}async function outputFound(t,e,a){var l=a.join(" | ");var i=`${t}, ${e}, ${l}`;csvFile+=`\n${i}`;await writeOutput("OUTPUT/DATA.csv",csvFile)}async function setup(){var t=JSON.parse(fs.readFileSync("settings.json"));var e=t.SITES_TO_CHECK;var a=t.TAGS_TO_FIND;return{client_urls:e,tags:a}}function validateURL(t){if(t.includes("http://")||t.includes("https://")){return true}else{return"URL must contain either http:// or https://"}}function getClientFromURL(t){var e=t.replace("www.","").replace(/(.*):\/\//,"").replace(/\.(.*)/,"").trim();return e}async function writeOutput(t,e){fs.writeFileSync(t,e)}async function getScreenshot(t,e){await e.screenshot({path:`OUTPUT/SCREENSHOTS/${t}.png`,fullPage:true})}async function preValidationOfUrls(e){for(let t of e){var a=validateURL(t);if(a!=true){console.log(`${t} must contain either http:// or https://`);process.exit()}}}async function getTime(){let t=(new Date).getTime();let e=(t-startTime)/totalChecked;let a=totalClients-totalChecked;let l=a*e;let i=Math.floor(l/36e5);let o=Math.floor(l%36e5/6e4);let r=Math.floor(l%6e4/1e3);return` ----- ETA: ${i} Hours : ${o} Mins : ${r} Seconds`}async function launch(t,e){const a=await puppeteer.launch({headless:"new",defaultViewport:null});const l=await a.newPage();await collectTags(t,e,l);await a.close();totalChecked++;var i=await getTime();console.clear();console.log(`${totalCollected} Collected & ${totalFailed} Failed out of ${totalClients}${i}`)}async function start(){var t=await setup();var e=t.client_urls;totalClients=e.length;await preValidationOfUrls(e);var a=t.tags;var l=3;var i=0;var o=[];for(let t of e){var r=validateURL(t);if(r==true){o.push(launch(t,a));i++;if(i==l){await Promise.all(o);i=0;o=[]}}else{invalidURLs+=`\n${t}, ${r}`;await writeOutput("OUTPUT/failedUrls.csv",invalidURLs);totalFailed++}}if(o.length>0){await Promise.all(o)}console.log("Completed!")}start();